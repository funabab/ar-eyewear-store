---
import { Icon } from 'astro-icon'
import preloader from '@/lottie/VR-AR-Cubes-Preloader.json?url'
import type { HTMLAttributes } from 'astro/types'
interface Props extends HTMLAttributes<'dialog'> {
  src: string
}
const { class: className, src, open, ...props } = Astro.props
---

<dialog
  class="backdrop:bg-opacity-0 open:backdrop:bg-opacity-100 transition duration-500 z-50 fixed top-0 left-0 w-screen h-screen text-white backdrop:bg-black"
  data-ar-model-src={src}
  data-ar-viewer-dialog
  {...props}
>
  <div
    data-ar-viewer-container
    class="w-full h-full absolute left-0 top-0 overflow-hidden"
  >
  </div>

  <div
    class="w-full h-full absolute top-0 left-0 flex justify-center items-center"
    data-is-preloader
  >
    <lottie-player src={preloader} class="p-10 bg-white" autoplay loop>
    </lottie-player>
  </div>

  <form method="dialog">
    <button class="left-5 top-5 absolute z-50">
      <Icon name="uis:times-circle" class="h-10" />
    </button>
  </form>
</dialog>

<script>
  // @ts-ignore
  import { MindARThree } from 'mind-ar/dist/mindar-face-three.prod.js'
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'
  import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader'
  import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader'

  import {
    AmbientLight,
    DataTexture,
    EquirectangularReflectionMapping,
    Mesh,
    MeshStandardMaterial,
    type Object3D,
    type PerspectiveCamera,
    type Scene,
    type WebGLRenderer,
  } from 'three'

  const elARViewer = document.querySelector(
    '[data-ar-viewer-dialog]'
  ) as HTMLDialogElement
  const elARViewerContainer = elARViewer.querySelector(
    '[data-ar-viewer-container]'
  )
  const elPreloader = elARViewer.querySelector('[data-is-preloader]')

  const mindarThree = new MindARThree({
    container: elARViewerContainer,
  })
  const arModelSrc = elARViewer.dataset.arModelSrc

  if (!arModelSrc) {
    throw new Error('arModelSrc is required')
  }

  let isClosed = true
  let isPresenting = false
  let isLoaded = false
  const dracoLoader = new DRACOLoader()
  dracoLoader.setDecoderPath('/draco/')

  const gltfLoader = new GLTFLoader()
  gltfLoader.setDRACOLoader(dracoLoader)

  elARViewer.addEventListener('open-ar-viewer', () => {
    elARViewer.showModal()
    isClosed = false
    start()
  })

  elARViewer.addEventListener('close', () => {
    if (isPresenting) {
      mindarThree.stop()
      isPresenting = false
      renderer.setAnimationLoop(null)
    }
    isClosed = true
  })

  const modelAnchor = mindarThree.addAnchor(168)
  const { renderer, scene, camera } = mindarThree as {
    renderer: WebGLRenderer
    scene: Scene
    camera: PerspectiveCamera
  }

  const start = async () => {
    if (isPresenting || !isLoaded || isClosed) {
      return
    }
    await mindarThree.start()
    renderer.setAnimationLoop(() => {
      renderer.render(scene, camera)
    })
    isPresenting = true
  }

  const envMap = await new Promise<DataTexture>((resolve, reject) => {
    new RGBELoader().setPath('/textures/equirectangular/').load(
      'neutral.hdr',
      function (texture) {
        texture.mapping = EquirectangularReflectionMapping
        resolve(texture)
      },
      undefined,
      reject
    )
  })

  scene.environment = envMap

  const [model, headModel] = await Promise.all(
    [arModelSrc, '/models/headOccluder.glb'].map<Promise<Object3D>>(
      (modelPath) =>
        new Promise((resolve, reject) => {
          gltfLoader.load(
            modelPath,
            (gltf) => {
              resolve(gltf.scene)
            },
            undefined,
            reject
          )
        })
    )
  )

  isLoaded = true
  elPreloader?.classList.add('hidden')

  model.position.set(0, 0, -0.2)
  model.scale.set(6.5, 6.5, 6.5)

  headModel.traverse((child) => {
    const mesh = child as Mesh
    if (mesh.isMesh) {
      mesh.renderOrder = 1
      mesh.material = new MeshStandardMaterial({
        colorWrite: false,
      })
    }
  })
  headModel.position.set(0, -0.3, 0.15)
  headModel.scale.set(0.065, 0.065, 0.065)

  modelAnchor.group.add(model, headModel)

  start()
</script>
